# -*- coding: utf-8 -*-
"""Family-Tree-Parsing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1op0qycWv_5ib72CAye-lWaEr-aDy26Zw
"""

!apt-get install swi-prolog
!pip install pyswip

from pyswip import Prolog

prolog = Prolog()

# Define gender facts (male and female)
prolog.assertz("male(john)")
prolog.assertz("male(tom)")
prolog.assertz("male(lucas)")
prolog.assertz("female(mary)")
prolog.assertz("female(sarah)")
prolog.assertz("female(kate)")
prolog.assertz("female(lily)")

# Define family relationships (parent facts)
prolog.assertz("parent(john, sarah)")
prolog.assertz("parent(john, tom)")
prolog.assertz("parent(mary, sarah)")
prolog.assertz("parent(mary, tom)")
prolog.assertz("parent(sarah, kate)")
prolog.assertz("parent(sarah, lucas)")
prolog.assertz("parent(tom, lily)")

# Define rules for family relationships
prolog.assertz("sibling(X, Y) :- parent(P, X), parent(P, Y), X \\= Y")
prolog.assertz("grandparent(X, Y) :- parent(X, Z), parent(Z, Y)")
prolog.assertz("mother(X, Y) :- parent(X, Y), female(X)")
prolog.assertz("father(X, Y) :- parent(X, Y), male(X)")
prolog.assertz("grandmother(X, Y) :- mother(X, Z), parent(Z, Y)")
prolog.assertz("grandfather(X, Y) :- father(X, Z), parent(Z, Y)")

# Results
print("Sarah's siblings:")
siblings = list(prolog.query("setof(Sibling, sibling(sarah, Sibling), SiblingList)"))
if siblings:
    for sibling in siblings[0]['SiblingList']:
        print(sibling)

print("\nKate's grandparents:")
grandparents = list(prolog.query("setof(Grandparent, grandparent(Grandparent, kate), GrandparentList)"))
if grandparents:
    for grandparent in grandparents[0]['GrandparentList']:
        print(grandparent)

print("\nTom's children:")
children = list(prolog.query("setof(Child, parent(tom, Child), ChildList)"))
if children:
    for child in children[0]['ChildList']:
        print(child)

# Ensure single output by using 'next' to retrieve the first match
print("\nKate's mother:")
mother = next(prolog.query("mother(Mother, kate)"))['Mother']
print(mother)

print("\nKate's father:")
father = next(prolog.query("father(Father, kate)"), None)
if father:
    print(father['Father'])
else:
    print("No father found")

print("\nKate's grandmother:")
grandmothers = list(prolog.query("setof(Grandmother, grandmother(Grandmother, kate), GrandmotherList)"))
if grandmothers:
    for grandmother in grandmothers[0]['GrandmotherList']:
        print(grandmother)

print("\nKate's grandfather:")
grandfathers = list(prolog.query("setof(Grandfather, grandfather(Grandfather, kate), GrandfatherList)"))
if grandfathers:
    for grandfather in grandfathers[0]['GrandfatherList']:
        print(grandfather)