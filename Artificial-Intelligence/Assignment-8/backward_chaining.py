# -*- coding: utf-8 -*-
"""Backward_Chaining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EsYAK8NGV89QAPHbg1XG7yIo5QDpQxXD
"""

# Initial facts
known_facts = ["X", "Y"]

# Rules in the format (condition, conclusion)
inference_rules = [
    (["X", "Y"], "Z"),  # If X and Y are true, then Z is true
    (["Z"], "W"),       # If Z is true, then W is true
    (["W"], "V")        # If W is true, then V is true
]

def backward_chaining(goal, current_facts, inference_rules):
    # If the goal is already known, return True
    if goal in current_facts:
        print(f"Goal {goal} is already known.")
        return True

    for rule in inference_rules:
        prerequisites, conclusion = rule

        # Check if the conclusion matches the goal
        if conclusion == goal:
            print(f"Trying to prove goal: {goal} using rule with conclusion {conclusion}")

            # Try to prove each prerequisite
            all_conditions_met = True
            for condition in prerequisites:
                if not backward_chaining(condition, current_facts, inference_rules):
                    all_conditions_met = False
                    break

            if all_conditions_met:
                print(f"Goal {goal} has been proven.")
                return True

    print(f"Goal {goal} cannot be proven.")
    return False


# Example of using backward chaining to prove a goal
goal_to_prove = "V"
print(f"\nStarting backward chaining to prove goal: {goal_to_prove}")
can_prove_goal = backward_chaining(goal_to_prove, known_facts, inference_rules)

if can_prove_goal:
    print(f"Final conclusion: The goal {goal_to_prove} can be proven.")
else:
    print(f"Final conclusion: The goal {goal_to_prove} cannot be proven.")